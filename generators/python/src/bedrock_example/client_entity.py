# AUTOGENERATED! DON'T EDIT!
from .jpath import *


def files(*resource_pack_paths: Path) -> Iterator[Path]:
    for pack_path in resource_pack_paths:
        for file in pack_path.glob("entity/**/*.json"):
            yield file


def objects(*paths: Path) -> Iterator[Optional[Json]]:
    for item_path in paths:
        try:
            with item_path.open('r') as f:
                yield get_jpath_single(Json(None, json.load(f)), [])
        except:
            yield None


def identifiers(*objects: Json) -> Iterator[str]:
    for obj in objects:
        identifier = get_jpath_single(obj, ["minecraft:client_entity", "description", "identifier"])
        if identifier is not None and isinstance(identifier.key, str):
            result = identifier.key

            yield result


def particle_effects(*objects: Json) -> Iterator[Tuple[str, str]]:
    for obj in objects:
        for ref in get_jpath_multi(obj, ["minecraft:client_entity", "description", "particle_effects", Jpath.STR]):
            if isinstance(ref.key, str) and isinstance(ref.value, str):


                yield ref.key, ref.value


def particle_emitters(*objects: Json) -> Iterator[Tuple[str, str]]:
    for obj in objects:
        for ref in get_jpath_multi(obj, ["minecraft:client_entity", "description", "particle_emitters", Jpath.STR]):
            if isinstance(ref.key, str) and isinstance(ref.value, str):


                yield ref.key, ref.value


def sound_effects(*objects: Json) -> Iterator[Tuple[str, str]]:
    for obj in objects:
        for ref in get_jpath_multi(obj, ["minecraft:client_entity", "description", "sound_effect", Jpath.STR]):
            if isinstance(ref.key, str) and isinstance(ref.value, str):


                yield ref.key, ref.value


def animations(*objects: Json) -> Iterator[Tuple[str, str]]:
    for obj in objects:
        for ref in get_jpath_multi(obj, ["minecraft:client_entity", "description", "animations", Jpath.STR]):
            if isinstance(ref.key, str) and isinstance(ref.value, str):

                if not ref.value.startswith("animation."):
                    continue
                yield ref.key, ref.value


def animation_controllers(*objects: Json) -> Iterator[Tuple[str, str]]:
    for obj in objects:
        for ref in get_jpath_multi(obj, ["minecraft:client_entity", "description", "animations"]):
            if isinstance(ref.key, str) and isinstance(ref.value, str):

                if not ref.value.startswith("controller.animation."):
                    continue
                yield ref.key, ref.value
